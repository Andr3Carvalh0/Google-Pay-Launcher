name: Android Worker

on:
  push:
    tags: 'v*'
    branches:
      [ release ]

jobs:
  unit_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: unit tests
        run: ./gradlew testDebugUnitTest

      - name: verify test results
        uses: asadmansr/android-test-report-action@v1.2.0
        if: ${{ always() }}

  ui_tests:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2

      - name: set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: ui tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          script: ./gradlew connectedCheck

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: prepare keystore
        env:
          ENCODED_STRING: ${{ secrets.GOOGLE_PAY_LAUNCHER_KEYSTORE }}
        run: |
          mkdir ./secrets/
          echo $ENCODED_STRING | base64 -di > ./secrets/release.jks

      - name: building
        run: ./gradlew assembleRelease
        env: 
          GOOGLE_PAY_LAUNCHER_KEY: ${{ secrets.GOOGLE_PAY_LAUNCHER_KEY }}
          GOOGLE_PAY_LAUNCHER_PASSWORD: ${{ secrets.GOOGLE_PAY_LAUNCHER_PASSWORD }}
      
      - name: upload apk
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: app/build/outputs/apk/release/

  publish:
    runs-on: ubuntu-latest
    needs: [unit_tests, ui_tests, build]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: create Github Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}

      - name: fetch uploaded apk
        uses: actions/download-artifact@v2
        with:
          name: artifacts

      - name: upload apk
        id: upload_release_asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./app-release.apk
          asset_name: GooglePayLauncher.apk
          asset_content_type: application/zip
